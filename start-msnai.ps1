# start-msnai.ps1 - Script de inicio para MSN-AI en Windows
# Versi√≥n: 1.0.0
# Autor: Alan Mac-Arthur Garc√≠a D√≠az
# Email: alan.mac.arthur.garcia.diaz@gmail.com
# Licencia: GNU General Public License v3.0
# Descripci√≥n: Inicia MSN-AI con verificaciones autom√°ticas en Windows

Write-Host "üöÄ MSN-AI v1.0.0 - Iniciando aplicaci√≥n..." -ForegroundColor Cyan
Write-Host "============================================"
Write-Host "üìß Desarrollado por: Alan Mac-Arthur Garc√≠a D√≠az" -ForegroundColor Green
Write-Host "‚öñÔ∏è Licencia: GPL-3.0 | üîó alan.mac.arthur.garcia.diaz@gmail.com" -ForegroundColor Yellow
Write-Host "============================================"

# Verificar si estamos en el directorio correcto
if (-not (Test-Path "msn-ai.html")) {
    Write-Host "‚ùå Error: No se encuentra msn-ai.html" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de ejecutar este script desde el directorio MSN-AI"
    exit 1
}

# Variables globales para procesos
$script:ServerProcess = $null
$script:OllamaProcess = $null
$script:BrowserName = ""
$script:BrowserPath = ""
$script:ServerUrl = ""
$script:ServerPort = 0

# Funci√≥n para verificar Ollama
function Test-Ollama {
    Write-Host "üîç Verificando Ollama..." -ForegroundColor Cyan

    if (-not (Get-Command ollama -ErrorAction SilentlyContinue)) {
        Write-Host "‚ö†Ô∏è  Ollama no est√° instalado" -ForegroundColor Yellow
        $install = Read-Host "   ¬øDeseas instalarlo autom√°ticamente? (s/n)"

        if ($install -eq "s" -or $install -eq "S") {
            Write-Host "üì¶ Instalando Ollama..." -ForegroundColor Green
            try {
                $tempPath = "$env:TEMP\OllamaSetup.exe"
                Invoke-WebRequest -Uri "https://ollama.com/download/OllamaSetup.exe" -OutFile $tempPath
                Start-Process -FilePath $tempPath -Wait
                Write-Host "‚úÖ Ollama instalado correctamente" -ForegroundColor Green
                Write-Host "   Reinicia PowerShell para usar Ollama" -ForegroundColor Yellow
            }
            catch {
                Write-Host "‚ùå Error instalando Ollama: $_" -ForegroundColor Red
                return $false
            }
        }
        else {
            Write-Host "‚è≠Ô∏è  Continuando sin Ollama (funcionalidad limitada)" -ForegroundColor Yellow
            return $false
        }
    }

    # Verificar si Ollama est√° ejecut√°ndose
    $ollamaRunning = Get-Process -Name "ollama*" -ErrorAction SilentlyContinue
    if (-not $ollamaRunning) {
        Write-Host "üîÑ Iniciando Ollama..." -ForegroundColor Yellow
        try {
            # Iniciar Ollama serve en segundo plano
            $script:OllamaProcess = Start-Process -FilePath "ollama" -ArgumentList "serve" -PassThru -WindowStyle Hidden
            Start-Sleep -Seconds 5

            # Verificar que se inici√≥
            $ollamaRunning = Get-Process -Name "ollama*" -ErrorAction SilentlyContinue
            if ($ollamaRunning) {
                Write-Host "‚úÖ Ollama iniciado correctamente (PID: $($ollamaRunning[0].Id))" -ForegroundColor Green
            }
            else {
                Write-Host "‚ö†Ô∏è Ollama puede no haberse iniciado correctamente" -ForegroundColor Yellow
            }
        }
        catch {
            Write-Host "‚ö†Ô∏è Error iniciando Ollama: $_" -ForegroundColor Yellow
            Write-Host "   Intenta iniciarlo manualmente con: ollama serve" -ForegroundColor Yellow
            return $false
        }
    }
    else {
        Write-Host "‚úÖ Ollama ya est√° ejecut√°ndose" -ForegroundColor Green
    }

    # Verificar modelos disponibles
    Write-Host "üß† Verificando modelos de IA..." -ForegroundColor Cyan
    Start-Sleep -Seconds 2
    try {
        $modelsOutput = & ollama list 2>&1
        $modelLines = $modelsOutput | Select-String -Pattern "^\w" | Where-Object { $_ -notmatch "^NAME" }
        $modelCount = ($modelLines | Measure-Object).Count

        if ($modelCount -eq 0) {
            Write-Host "‚ö†Ô∏è  No hay modelos instalados" -ForegroundColor Yellow
            $installModel = Read-Host "   ¬øDeseas instalar mistral:7b (recomendado)? (s/n)"

            if ($installModel -eq "s" -or $installModel -eq "S") {
                Write-Host "üì• Descargando mistral:7b (esto puede tardar varios minutos)..." -ForegroundColor Green
                & ollama pull mistral:7b
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "‚úÖ Modelo instalado correctamente" -ForegroundColor Green
                }
                else {
                    Write-Host "‚ùå Error instalando modelo" -ForegroundColor Red
                    return $false
                }
            }
            else {
                Write-Host "‚è≠Ô∏è  Continuando sin modelos (funcionalidad limitada)" -ForegroundColor Yellow
            }
        }
        else {
            Write-Host "‚úÖ Modelos disponibles: $modelCount" -ForegroundColor Green
            $modelLines | Select-Object -First 5 | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è No se pudieron verificar los modelos: $_" -ForegroundColor Yellow
    }

    return $true
}

# Funci√≥n para detectar navegador
function Find-Browser {
    Write-Host "üåê Detectando navegador..." -ForegroundColor Cyan

    # Lista de navegadores comunes en Windows
    $browsers = @(
        @{Name="Chrome"; Path="C:\Program Files\Google\Chrome\Application\chrome.exe"},
        @{Name="Chrome"; Path="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"},
        @{Name="Edge"; Path="C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"},
        @{Name="Edge"; Path="C:\Program Files\Microsoft\Edge\Application\msedge.exe"},
        @{Name="Firefox"; Path="C:\Program Files\Mozilla Firefox\firefox.exe"},
        @{Name="Firefox"; Path="C:\Program Files (x86)\Mozilla Firefox\firefox.exe"},
        @{Name="Brave"; Path="C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe"},
        @{Name="Opera"; Path="C:\Program Files\Opera\launcher.exe"}
    )

    foreach ($browser in $browsers) {
        if (Test-Path $browser.Path) {
            $script:BrowserName = $browser.Name
            $script:BrowserPath = $browser.Path
            Write-Host "‚úÖ Navegador encontrado: $($browser.Name)" -ForegroundColor Green
            return $true
        }
    }

    # Fallback al navegador por defecto
    $script:BrowserName = "Default"
    $script:BrowserPath = ""
    Write-Host "‚ö†Ô∏è  Usando navegador por defecto del sistema" -ForegroundColor Yellow
    return $true
}

# Funci√≥n para verificar si un puerto est√° disponible
function Test-PortAvailable {
    param([int]$Port)

    try {
        $connection = Get-NetTCPConnection -LocalPort $Port -ErrorAction SilentlyContinue
        return $null -eq $connection
    }
    catch {
        return $true
    }
}

# Funci√≥n para iniciar servidor web
function Start-WebServer {
    Write-Host "üåç Iniciando servidor web local..." -ForegroundColor Cyan

    # Buscar puerto disponible
    $script:ServerPort = 8000
    while (-not (Test-PortAvailable -Port $script:ServerPort)) {
        $script:ServerPort++
        if ($script:ServerPort -gt 8020) {
            Write-Host "‚ùå No se encontr√≥ puerto disponible (8000-8020)" -ForegroundColor Red
            return $false
        }
    }

    Write-Host "üì° Puerto disponible: $script:ServerPort" -ForegroundColor Yellow

    # Verificar Python
    $pythonCmd = $null
    if (Get-Command python -ErrorAction SilentlyContinue) {
        $pythonCmd = "python"
    }
    elseif (Get-Command python3 -ErrorAction SilentlyContinue) {
        $pythonCmd = "python3"
    }
    elseif (Get-Command py -ErrorAction SilentlyContinue) {
        $pythonCmd = "py"
    }

    if ($pythonCmd) {
        try {
            Write-Host "üêç Usando $pythonCmd para el servidor..." -ForegroundColor Green

            # Crear proceso de servidor
            $psi = New-Object System.Diagnostics.ProcessStartInfo
            $psi.FileName = $pythonCmd
            $psi.Arguments = "-m http.server $script:ServerPort"
            $psi.UseShellExecute = $false
            $psi.CreateNoWindow = $true
            $psi.RedirectStandardOutput = $true
            $psi.RedirectStandardError = $true

            $script:ServerProcess = New-Object System.Diagnostics.Process
            $script:ServerProcess.StartInfo = $psi
            $script:ServerProcess.Start() | Out-Null

            Start-Sleep -Seconds 2

            # Verificar que el servidor est√° corriendo
            if (-not $script:ServerProcess.HasExited) {
                $script:ServerUrl = "http://localhost:$script:ServerPort"
                Write-Host "‚úÖ Servidor iniciado correctamente (PID: $($script:ServerProcess.Id))" -ForegroundColor Green
                return $true
            }
            else {
                Write-Host "‚ùå El servidor se detuvo inesperadamente" -ForegroundColor Red
                return $false
            }
        }
        catch {
            Write-Host "‚ùå Error iniciando servidor Python: $_" -ForegroundColor Red
            return $false
        }
    }
    else {
        Write-Host "‚ö†Ô∏è Python no est√° instalado" -ForegroundColor Yellow
        Write-Host "   Instala Python desde: https://www.python.org/downloads/" -ForegroundColor Yellow
        Write-Host "   O usa el modo archivo directo (opci√≥n 2)" -ForegroundColor Yellow
        return $false
    }
}

# Funci√≥n para abrir aplicaci√≥n
function Open-Application {
    param([string]$url)

    Write-Host "üöÄ Abriendo MSN-AI..." -ForegroundColor Cyan

    try {
        if ([string]::IsNullOrEmpty($script:BrowserPath) -or $script:BrowserName -eq "Default") {
            # Usar el navegador por defecto del sistema
            Start-Process $url
        }
        else {
            # Usar navegador espec√≠fico
            if ($url -like "http://*") {
                Start-Process -FilePath $script:BrowserPath -ArgumentList $url
            }
            else {
                Start-Process -FilePath $script:BrowserPath -ArgumentList $url
            }
        }
        Start-Sleep -Seconds 2
        Write-Host "‚úÖ MSN-AI abierto en el navegador" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ö†Ô∏è Error abriendo navegador: $_" -ForegroundColor Yellow
        Write-Host "   Abre manualmente: $url" -ForegroundColor Yellow
        return $false
    }
}

# Funci√≥n de limpieza
function Stop-Services {
    Write-Host ""
    Write-Host "üßπ Limpiando procesos MSN-AI..." -ForegroundColor Cyan

    # Detener servidor web
    if ($null -ne $script:ServerProcess -and -not $script:ServerProcess.HasExited) {
        Write-Host "üõë Deteniendo servidor web (PID: $($script:ServerProcess.Id))..." -ForegroundColor Yellow
        try {
            $script:ServerProcess.Kill()
            $script:ServerProcess.WaitForExit(5000)
            Write-Host "‚úÖ Servidor web detenido" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è Error deteniendo servidor web: $_" -ForegroundColor Yellow
        }
    }

    # Detener Ollama solo si fue iniciado por este script
    if ($null -ne $script:OllamaProcess -and -not $script:OllamaProcess.HasExited) {
        Write-Host "üõë Deteniendo Ollama (PID: $($script:OllamaProcess.Id))..." -ForegroundColor Yellow
        try {
            $script:OllamaProcess.Kill()
            $script:OllamaProcess.WaitForExit(5000)
            Write-Host "‚úÖ Ollama detenido" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è Error deteniendo Ollama: $_" -ForegroundColor Yellow
        }
    }

    Write-Host "‚úÖ Limpieza completada" -ForegroundColor Green
    Write-Host "üëã ¬°Gracias por usar MSN-AI v1.0.0!" -ForegroundColor Cyan
    Write-Host "üìß Reporta problemas a: alan.mac.arthur.garcia.diaz@gmail.com" -ForegroundColor Yellow
}

# Registrar manejador de salida
try {
    $null = Register-EngineEvent PowerShell.Exiting -Action {
        Stop-Services
    }
}
catch {
    # Si falla el registro, no es cr√≠tico
}

# ===================
# FLUJO PRINCIPAL
# ===================

Write-Host ""
Write-Host "üìã Iniciando verificaciones del sistema..." -ForegroundColor Cyan
Write-Host ""

# 1. Verificar Ollama (opcional pero recomendado)
$ollamaOk = Test-Ollama
Write-Host ""

# 2. Detectar navegador
$browserFound = Find-Browser
Write-Host ""

# 3. Decidir m√©todo de apertura
Write-Host "ü§î Selecciona m√©todo de inicio:" -ForegroundColor Cyan
Write-Host ""

$autoMode = $false
if ($args.Count -gt 0) {
    if ($args[0] -eq "--auto" -or $args[0] -eq "-auto" -or $args[0] -eq "auto") {
        $autoMode = $true
    }
}

if ($autoMode) {
    Write-Host "üîÑ Modo autom√°tico activado" -ForegroundColor Green
    $method = "1"
}
else {
    Write-Host "   1) Servidor local (recomendado para todas las funciones)"
    Write-Host "   2) Archivo directo (puede tener limitaciones CORS)"
    Write-Host "   3) Solo verificar sistema (no inicia la aplicaci√≥n)"
    Write-Host ""
    $method = Read-Host "Selecciona una opci√≥n (1-3)"

    if ([string]::IsNullOrWhiteSpace($method)) {
        $method = "1"
    }
}

Write-Host ""

switch ($method) {
    "1" {
        Write-Host "üì° Iniciando con servidor local..." -ForegroundColor Cyan
        $serverStarted = Start-WebServer

        if ($serverStarted -and $null -ne $script:ServerProcess) {
            Write-Host ""
            $fullUrl = "$script:ServerUrl/msn-ai.html"
            Open-Application $fullUrl

            Write-Host ""
            Write-Host "============================================" -ForegroundColor Cyan
            Write-Host "üéâ ¬°MSN-AI v1.0.0 est√° ejecut√°ndose!" -ForegroundColor Green
            Write-Host "============================================" -ForegroundColor Cyan
            Write-Host ""
            Write-Host "üì± URL: $fullUrl" -ForegroundColor Yellow
            Write-Host "üîß Ollama: $(if($ollamaOk){'‚úÖ Funcionando'}else{'‚ö†Ô∏è No disponible'})" -ForegroundColor $(if($ollamaOk){'Green'}else{'Yellow'})
            Write-Host "üåê Navegador: $script:BrowserName" -ForegroundColor Green
            Write-Host "üìß Desarrollador: Alan Mac-Arthur Garc√≠a D√≠az" -ForegroundColor Gray
            Write-Host ""
            Write-Host "üí° Instrucciones importantes:" -ForegroundColor Yellow
            Write-Host "   ‚Ä¢ Mant√©n esta ventana abierta mientras usas MSN-AI" -ForegroundColor White
            Write-Host "   ‚Ä¢ Para detener: presiona Ctrl+C" -ForegroundColor White
            Write-Host "   ‚Ä¢ NO cierres esta ventana sin presionar Ctrl+C" -ForegroundColor White
            Write-Host ""
            Write-Host "‚è≥ Servidor activo en puerto $script:ServerPort..." -ForegroundColor Green
            Write-Host "   Presiona Ctrl+C para detener de forma segura" -ForegroundColor Green
            Write-Host ""

            # Mantener servidor activo
            try {
                while ($true) {
                    if ($script:ServerProcess.HasExited) {
                        Write-Host ""
                        Write-Host "‚ö†Ô∏è El servidor se detuvo inesperadamente" -ForegroundColor Yellow
                        break
                    }
                    Start-Sleep -Seconds 1
                }
            }
            catch {
                # Usuario presion√≥ Ctrl+C
                Write-Host ""
            }
            finally {
                Stop-Services
            }
        }
        else {
            Write-Host ""
            Write-Host "‚ùå No se pudo iniciar el servidor web" -ForegroundColor Red
            Write-Host "   Opciones:" -ForegroundColor Yellow
            Write-Host "   1. Instala Python desde: https://www.python.org/downloads/" -ForegroundColor White
            Write-Host "   2. Ejecuta de nuevo el script y elige opci√≥n 2 (archivo directo)" -ForegroundColor White
            Write-Host ""
        }
    }

    "2" {
        Write-Host "üìÅ Iniciando en modo archivo directo..." -ForegroundColor Cyan
        $currentPath = (Get-Location).Path
        $directUrl = "file:///$($currentPath.Replace('\', '/'))/msn-ai.html"

        Write-Host "   URL: $directUrl" -ForegroundColor Gray
        Write-Host ""

        $opened = Open-Application $directUrl

        if (-not $opened) {
            Write-Host ""
            Write-Host "‚ö†Ô∏è Intenta abrir manualmente el archivo:" -ForegroundColor Yellow
            Write-Host "   $currentPath\msn-ai.html" -ForegroundColor White
        }

        Write-Host ""
        Write-Host "============================================" -ForegroundColor Cyan
        Write-Host "üéâ MSN-AI v1.0.0 - Modo archivo directo" -ForegroundColor Green
        Write-Host "============================================" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "‚ö†Ô∏è  Advertencia: Modo archivo directo activo" -ForegroundColor Yellow
        Write-Host "   Algunas funciones pueden estar limitadas por CORS" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "üîß Ollama: $(if($ollamaOk){'‚úÖ Funcionando'}else{'‚ùå No disponible'})" -ForegroundColor $(if($ollamaOk){'Green'}else{'Red'})
        Write-Host "üåê Navegador: $script:BrowserName" -ForegroundColor Green
        Write-Host "üìß Soporte: alan.mac.arthur.garcia.diaz@gmail.com" -ForegroundColor Gray
        Write-Host ""
        Write-Host "üí° Si tienes problemas, usa el modo servidor (opci√≥n 1)" -ForegroundColor Yellow
        Write-Host "   Requiere tener Python instalado" -ForegroundColor White
        Write-Host ""
        Write-Host "‚úÖ Puedes cerrar esta ventana de forma segura" -ForegroundColor Green
        Write-Host ""
    }

    "3" {
        Write-Host "üîç Verificaci√≥n del sistema completada:" -ForegroundColor Cyan
        Write-Host "============================================"
        Write-Host ""
        Write-Host "‚úÖ MSN-AI: Archivo principal encontrado" -ForegroundColor Green
        Write-Host "üîß Ollama: $(if($ollamaOk){'‚úÖ Funcionando correctamente'}else{'‚ùå No disponible o no instalado'})" -ForegroundColor $(if($ollamaOk){'Green'}else{'Red'})
        Write-Host "üåê Navegador: $script:BrowserName detectado" -ForegroundColor Green
        Write-Host "üìß Desarrollador: Alan Mac-Arthur Garc√≠a D√≠az" -ForegroundColor Gray
        Write-Host "‚öñÔ∏è  Licencia: GPL-3.0" -ForegroundColor Gray
        Write-Host ""
        Write-Host "üí° Para iniciar MSN-AI:" -ForegroundColor Yellow
        Write-Host "   .\start-msnai.ps1" -ForegroundColor White
        Write-Host "   O en modo autom√°tico:" -ForegroundColor White
        Write-Host "   .\start-msnai.ps1 --auto" -ForegroundColor White
        Write-Host ""

        if (-not $ollamaOk) {
            Write-Host "‚ö†Ô∏è  Advertencia: Ollama no est√° disponible" -ForegroundColor Yellow
            Write-Host "   MSN-AI funcionar√° con capacidades limitadas" -ForegroundColor Yellow
            Write-Host "   Instala Ollama desde: https://ollama.com/download" -ForegroundColor White
            Write-Host ""
        }
    }

    default {
        Write-Host "‚ùå Opci√≥n no v√°lida: '$method'" -ForegroundColor Red
        Write-Host "   Por favor, elige 1, 2 o 3" -ForegroundColor Yellow
        Write-Host ""
        exit 1
    }
}

Write-Host "============================================" -ForegroundColor Cyan
Write-Host "üèÅ Script completado" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan
Write-Host "üìß ¬øProblemas? Contacta: alan.mac.arthur.garcia.diaz@gmail.com" -ForegroundColor Yellow
Write-Host "‚öñÔ∏è  Software libre bajo licencia GPL-3.0" -ForegroundColor Green
Write-Host "üåü GitHub: https://github.com/tu-usuario/MSN-AI" -ForegroundColor Cyan
Write-Host ""
