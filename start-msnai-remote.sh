#!/bin/bash

# MSN-AI - Instalaci√≥n Transparente con Acceso Remoto Autom√°tico
# =============================================================
# üéØ Por: Alan Mac-Arthur Garc√≠a D√≠az
# ‚öñÔ∏è Licencia: GPL-3.0
# üìß alan.mac.arthur.garcia.diaz@gmail.com
# =============================================================

echo "üöÄ MSN-AI v2.0.0 - Instalaci√≥n Remota Transparente"
echo "=================================================="
echo "üìß Desarrollado por: Alan Mac-Arthur Garc√≠a D√≠az"
echo "‚öñÔ∏è Licencia: GPL-3.0 | üîó alan.mac.arthur.garcia.diaz@gmail.com"
echo "üåê Modo: Docker + Acceso Remoto Autom√°tico"
echo "=================================================="
echo ""

# Detectar informaci√≥n del sistema
SERVER_IP=$(hostname -I | awk '{print $1}' 2>/dev/null || ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[^ ]+' || echo "localhost")
SERVER_NAME=$(hostname 2>/dev/null || echo "unknown")

if [ "$SERVER_IP" = "localhost" ] || [ -z "$SERVER_IP" ]; then
    SERVER_IP=$(ip route get 8.8.8.8 2>/dev/null | grep -oP 'src \K[^ ]+' || echo "127.0.0.1")
fi

echo "üñ•Ô∏è Servidor: $SERVER_NAME ($SERVER_IP)"
echo ""

# Verificar directorio correcto
if [ ! -f "msn-ai.html" ]; then
    echo "‚ùå Error: No se encuentra msn-ai.html"
    echo "   Aseg√∫rate de ejecutar este script desde el directorio MSN-AI"
    exit 1
fi

# Verificar Docker
if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker no est√° instalado"
    echo "üí° Instalar Docker:"
    echo "   curl -fsSL https://get.docker.com -o get-docker.sh"
    echo "   sudo sh get-docker.sh"
    exit 1
fi

if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker no est√° ejecut√°ndose"
    echo "üí° Iniciar Docker: sudo systemctl start docker"
    exit 1
fi

# Detectar Docker Compose
DOCKER_COMPOSE_CMD=""
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version &> /dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    echo "‚ùå Docker Compose no est√° disponible"
    echo "üí° Instalar Docker Compose:"
    echo "   sudo apt update && sudo apt install docker-compose-plugin"
    exit 1
fi

echo "‚úÖ Docker y Docker Compose disponibles"
echo ""

# Funci√≥n para configurar firewall autom√°ticamente
configure_firewall_auto() {
    echo "üî• Configurando acceso remoto autom√°ticamente..."

    if ! command -v ufw >/dev/null 2>&1; then
        echo "‚ö†Ô∏è UFW no disponible, saltando configuraci√≥n firewall"
        echo "üí° Si tienes problemas de acceso remoto, consulta tu administrador de firewall"
        return 1
    fi

    # Intentar configuraci√≥n autom√°tica silenciosa
    UFW_CONFIGURED=false

    if [ "$EUID" -eq 0 ]; then
        # Ejecut√°ndose como root
        echo "üîß Configurando como administrador..."
        ufw allow 8000 comment "MSN-AI Web Interface" >/dev/null 2>&1
        ufw allow 11434 comment "MSN-AI Ollama API" >/dev/null 2>&1

        if ufw status 2>/dev/null | grep -q "inactive"; then
            ufw --force enable >/dev/null 2>&1
        fi
        UFW_CONFIGURED=true
        echo "‚úÖ Firewall configurado autom√°ticamente"

    elif sudo -n true 2>/dev/null; then
        # Sudo sin contrase√±a disponible
        echo "üîß Configurando con permisos elevados..."
        sudo ufw allow 8000 comment "MSN-AI Web Interface" >/dev/null 2>&1
        sudo ufw allow 11434 comment "MSN-AI Ollama API" >/dev/null 2>&1

        if sudo ufw status 2>/dev/null | grep -q "inactive"; then
            sudo ufw --force enable >/dev/null 2>&1
        fi
        UFW_CONFIGURED=true
        echo "‚úÖ Firewall configurado autom√°ticamente"

    else
        # Necesita contrase√±a sudo
        echo "üîê Se requieren permisos de administrador para configurar acceso remoto"
        echo "üí° Puedes:"
        echo "   1. Ejecutar: sudo $0"
        echo "   2. Configurar manualmente despu√©s: sudo ufw allow 8000 && sudo ufw allow 11434"
        echo "   3. Continuar solo con acceso local"
        echo ""
        echo "¬øContinuar con la instalaci√≥n? (Y/n): "
        read -r CONTINUE
        if [ "$CONTINUE" = "n" ] || [ "$CONTINUE" = "N" ]; then
            echo "‚ùå Instalaci√≥n cancelada por el usuario"
            exit 1
        fi
        UFW_CONFIGURED=false
    fi

    return 0
}

# Funci√≥n para instalar MSN-AI
install_msnai() {
    echo "üê≥ Iniciando instalaci√≥n de MSN-AI..."
    echo "===================================="

    # Configurar variables de entorno
    export MSN_AI_VERSION=2.0.0
    export MSN_AI_PORT=8000
    export OLLAMA_HOST=0.0.0.0:11434
    export OLLAMA_ORIGINS="*"

    # Crear archivo .env si no existe
    if [ ! -f ".env" ]; then
        cat > .env << EOF
# MSN-AI Environment Configuration
MSN_AI_VERSION=2.0.0
MSN_AI_PORT=8000
OLLAMA_HOST=0.0.0.0:11434
OLLAMA_ORIGINS=*
EOF
        echo "‚úÖ Archivo de configuraci√≥n creado"
    fi

    # Limpiar instalaci√≥n previa si existe
    echo "üßπ Limpiando instalaci√≥n previa..."
    $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml down >/dev/null 2>&1 || true

    # Construir e iniciar contenedores
    echo "üî® Construyendo contenedores MSN-AI..."
    if ! $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml build --quiet; then
        echo "‚ùå Error construyendo contenedores"
        return 1
    fi

    echo "üöÄ Iniciando servicios MSN-AI..."
    if ! $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml up -d; then
        echo "‚ùå Error iniciando servicios"
        return 1
    fi

    echo "‚úÖ Contenedores iniciados"
    return 0
}

# Funci√≥n para esperar que los servicios est√©n listos
wait_for_services() {
    echo ""
    echo "‚è≥ Esperando que los servicios est√©n listos..."

    local max_attempts=60
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        echo -n "‚è≥ Intento $attempt/$max_attempts..."

        # Verificar que MSN-AI responda
        if curl -s --connect-timeout 3 "http://localhost:8000/msn-ai.html" >/dev/null 2>&1; then
            echo " ‚úÖ MSN-AI listo"
            break
        fi

        if [ $attempt -eq $max_attempts ]; then
            echo " ‚ùå Timeout"
            echo "‚ö†Ô∏è Los servicios est√°n tardando m√°s de lo esperado"
            echo "üí° Verificar logs: docker logs msn-ai-app"
            return 1
        fi

        echo " ‚è≥"
        sleep 2
        ((attempt++))
    done

    # Esperar un poco m√°s para Ollama
    echo "‚è≥ Esperando que Ollama est√© listo..."
    sleep 5

    return 0
}

# Funci√≥n para verificar conectividad completa
verify_connectivity() {
    echo ""
    echo "üß™ Verificando conectividad completa..."
    echo "====================================="

    local all_ok=true

    # Test local web
    echo -n "üè† MSN-AI local (localhost:8000): "
    if curl -s --connect-timeout 5 "http://localhost:8000/msn-ai.html" >/dev/null 2>&1; then
        echo "‚úÖ"
        LOCAL_WEB_OK=true
    else
        echo "‚ùå"
        LOCAL_WEB_OK=false
        all_ok=false
    fi

    # Test local API
    echo -n "ü§ñ Ollama local (localhost:11434): "
    if curl -s --connect-timeout 5 "http://localhost:11434/api/tags" >/dev/null 2>&1; then
        OLLAMA_RESPONSE=$(curl -s "http://localhost:11434/api/tags" 2>/dev/null)
        MODEL_COUNT=$(echo "$OLLAMA_RESPONSE" | grep -o '"name"' | wc -l 2>/dev/null || echo "0")
        echo "‚úÖ ($MODEL_COUNT modelos)"
        LOCAL_API_OK=true
    else
        echo "‚ùå"
        LOCAL_API_OK=false
        all_ok=false
    fi

    # Test remoto solo si la IP no es localhost
    if [ "$SERVER_IP" != "localhost" ] && [ "$SERVER_IP" != "127.0.0.1" ]; then
        # Test remoto web
        echo -n "üåê MSN-AI remoto ($SERVER_IP:8000): "
        if curl -s --connect-timeout 5 "http://$SERVER_IP:8000/msn-ai.html" >/dev/null 2>&1; then
            echo "‚úÖ"
            REMOTE_WEB_OK=true
        else
            echo "‚ùå"
            REMOTE_WEB_OK=false
        fi

        # Test remoto API
        echo -n "üåê Ollama remoto ($SERVER_IP:11434): "
        if curl -s --connect-timeout 5 "http://$SERVER_IP:11434/api/tags" >/dev/null 2>&1; then
            echo "‚úÖ"
            REMOTE_API_OK=true
        else
            echo "‚ùå"
            REMOTE_API_OK=false
        fi

        REMOTE_ACCESS_AVAILABLE=$([ "$REMOTE_WEB_OK" = true ] && [ "$REMOTE_API_OK" = true ] && echo true || echo false)
    else
        REMOTE_ACCESS_AVAILABLE=false
    fi

    return $([ "$all_ok" = true ] && echo 0 || echo 1)
}

# Funci√≥n para mostrar estado final
show_final_status() {
    echo ""
    echo "üéâ INSTALACI√ìN COMPLETADA"
    echo "========================="
    echo ""

    if [ "$LOCAL_WEB_OK" = true ] && [ "$LOCAL_API_OK" = true ]; then
        echo "‚úÖ MSN-AI FUNCIONANDO CORRECTAMENTE"
        echo ""

        echo "üîó ACCESO DISPONIBLE:"
        echo "   üè† Local:  http://localhost:8000/msn-ai.html"

        if [ "$REMOTE_ACCESS_AVAILABLE" = true ]; then
            echo "   üåê Remoto: http://$SERVER_IP:8000/msn-ai.html"
            echo ""
            echo "üåü CARACTER√çSTICAS ACTIVAS:"
            echo "   ‚úÖ Acceso local y remoto transparente"
            echo "   ‚úÖ Auto-detecci√≥n de configuraci√≥n en la interfaz"
            echo "   ‚úÖ Carga autom√°tica de modelos de IA"
            echo "   ‚úÖ Sin configuraci√≥n adicional requerida"
            echo ""
            echo "üí° Los usuarios pueden acceder desde cualquier dispositivo en la red usando:"
            echo "   http://$SERVER_IP:8000/msn-ai.html"
        else
            echo ""
            if [ "$UFW_CONFIGURED" = false ]; then
                echo "‚ö†Ô∏è ACCESO REMOTO LIMITADO"
                echo "   ‚Ä¢ Funciona perfectamente en modo local"
                echo "   ‚Ä¢ Para acceso remoto completo, ejecuta:"
                echo "     sudo ufw allow 8000 && sudo ufw allow 11434"
            else
                echo "‚ö†Ô∏è VERIFICAR ACCESO REMOTO"
                echo "   ‚Ä¢ Firewall configurado correctamente"
                echo "   ‚Ä¢ Puede haber otros firewalls (router, etc.)"
                echo "   ‚Ä¢ Probar acceso desde otro dispositivo"
            fi
        fi

    else
        echo "‚ö†Ô∏è INSTALACI√ìN CON PROBLEMAS"
        echo ""
        echo "üõ†Ô∏è DIAGN√ìSTICO:"
        if [ "$LOCAL_WEB_OK" = false ]; then
            echo "   ‚ùå MSN-AI web no accesible localmente"
            echo "      Verificar: docker logs msn-ai-app"
        fi

        if [ "$LOCAL_API_OK" = false ]; then
            echo "   ‚ùå Ollama no accesible localmente"
            echo "      Verificar: docker logs msn-ai-ollama"
        fi
    fi

    echo ""
    echo "üöÄ CARACTER√çSTICAS DE MSN-AI v2.0.0:"
    echo "   ‚Ä¢ ü§ñ IA conversacional con Ollama"
    echo "   ‚Ä¢ üåê Acceso remoto transparente y autom√°tico"
    echo "   ‚Ä¢ üì± Interfaz web responsive"
    echo "   ‚Ä¢ üíæ Persistencia de chats y configuraci√≥n"
    echo "   ‚Ä¢ üîß Auto-configuraci√≥n inteligente"
    echo "   ‚Ä¢ üõ†Ô∏è Diagn√≥sticos integrados"

    echo ""
    echo "üìã COMANDOS √öTILES:"
    echo "   üîç Estado:    $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml ps"
    echo "   üìã Logs:      $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml logs -f"
    echo "   üîÑ Reiniciar: $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml restart"
    echo "   ‚èπÔ∏è  Detener:   $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml down"

    echo ""
    echo "üß™ DIAGN√ìSTICO Y PRUEBAS:"
    echo "   ./docker-test-ai.sh          # Test completo de IA"
    echo "   ./test-remote-connection.sh  # Test de conectividad remota"
    echo "   docker logs msn-ai-app       # Logs de la aplicaci√≥n"
    echo "   docker logs msn-ai-ollama    # Logs de Ollama"

    echo ""
    echo "üìû Soporte: alan.mac.arthur.garcia.diaz@gmail.com"
    echo "üöÄ MSN-AI Transparent Remote Installation v2.0.0"
}

# Funci√≥n principal
main() {
    # Paso 1: Configurar acceso remoto
    configure_firewall_auto

    # Paso 2: Instalar MSN-AI
    echo ""
    if ! install_msnai; then
        echo "‚ùå Error en la instalaci√≥n de MSN-AI"
        exit 1
    fi

    # Paso 3: Esperar servicios
    if ! wait_for_services; then
        echo "‚ùå Los servicios no est√°n respondiendo correctamente"
        echo "üí° Verificar logs y reintentar"
    fi

    # Paso 4: Verificar conectividad
    verify_connectivity

    # Paso 5: Mostrar estado final
    show_final_status
}

# Manejo de se√±ales para limpieza
cleanup() {
    echo ""
    echo "üßπ Limpiando y deteniendo servicios..."
    $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml down >/dev/null 2>&1 || true
    echo "‚úÖ Limpieza completada"
    exit 1
}

trap cleanup INT TERM

# Verificar argumentos
case "${1:-}" in
    --help|-h)
        echo "üìã USO: $0 [opciones]"
        echo ""
        echo "Este script instala MSN-AI con Docker y configura"
        echo "autom√°ticamente el acceso remoto transparente."
        echo ""
        echo "Opciones:"
        echo "  --help, -h    Mostrar esta ayuda"
        echo ""
        echo "Caracter√≠sticas:"
        echo "  üåê Auto-configuraci√≥n de firewall"
        echo "  üîß Detecci√≥n autom√°tica de IP del servidor"
        echo "  ü§ñ Configuraci√≥n transparente de Ollama"
        echo "  üì± Interfaz que se adapta autom√°ticamente"
        echo ""
        echo "URLs resultantes:"
        echo "  Local:  http://localhost:8000/msn-ai.html"
        echo "  Remoto: http://[IP-SERVIDOR]:8000/msn-ai.html"
        exit 0
        ;;
    --version|-v)
        echo "MSN-AI Transparent Remote Installation v2.0.0"
        echo "Por: Alan Mac-Arthur Garc√≠a D√≠az"
        echo "Licencia: GPL-3.0"
        exit 0
        ;;
esac

# Ejecutar instalaci√≥n principal
echo "üéØ Iniciando instalaci√≥n transparente de MSN-AI..."
echo "üåê Configuraci√≥n autom√°tica para: $SERVER_IP"
echo ""

main

echo ""
echo "üéâ ¬°Instalaci√≥n completada! MSN-AI est√° listo para usar."
