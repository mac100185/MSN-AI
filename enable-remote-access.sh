#!/bin/bash

# MSN-AI - Habilitar Acceso Remoto en Instalaci√≥n Existente
# ========================================================
# üéØ Por: Alan Mac-Arthur Garc√≠a D√≠az
# ‚öñÔ∏è Licencia: GPL-3.0
# üìß alan.mac.arthur.garcia.diaz@gmail.com
# ========================================================

echo "üîß MSN-AI - Habilitar Acceso Remoto"
echo "==================================="
echo "üéØ Por: Alan Mac-Arthur Garc√≠a D√≠az"
echo "‚öñÔ∏è Licencia: GPL-3.0"
echo "==================================="
echo ""

# Detectar informaci√≥n del sistema
SERVER_IP=$(hostname -I | awk '{print $1}' 2>/dev/null || ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[^ ]+' || echo "localhost")
SERVER_NAME=$(hostname 2>/dev/null || echo "unknown")

if [ "$SERVER_IP" = "localhost" ] || [ -z "$SERVER_IP" ]; then
    SERVER_IP=$(ip route get 8.8.8.8 2>/dev/null | grep -oP 'src \K[^ ]+' || echo "127.0.0.1")
fi

echo "üñ•Ô∏è Servidor: $SERVER_NAME ($SERVER_IP)"
echo ""

# Verificar si MSN-AI est√° instalado
if [ ! -f "msn-ai.html" ]; then
    echo "‚ùå MSN-AI no encontrado en este directorio"
    echo "üí° Aseg√∫rate de ejecutar este script desde el directorio MSN-AI"
    exit 1
fi

# Verificar si Docker est√° ejecut√°ndose
if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker no est√° disponible"
    exit 1
fi

# Detectar Docker Compose
DOCKER_COMPOSE_CMD=""
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version &> /dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    echo "‚ùå Docker Compose no est√° disponible"
    exit 1
fi

# Funci√≥n para verificar estado actual
check_current_status() {
    echo "üîç Verificando estado actual de MSN-AI..."
    echo "========================================"

    # Verificar contenedores
    if $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml ps | grep -q "msn-ai"; then
        echo "‚úÖ Contenedores MSN-AI encontrados"
        CONTAINERS_EXIST=true

        # Verificar si est√°n ejecut√°ndose
        if $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml ps | grep -q "Up"; then
            echo "‚úÖ Contenedores ejecut√°ndose"
            CONTAINERS_RUNNING=true
        else
            echo "‚ö†Ô∏è Contenedores detenidos"
            CONTAINERS_RUNNING=false
        fi
    else
        echo "‚ùå No se encontraron contenedores MSN-AI"
        CONTAINERS_EXIST=false
        CONTAINERS_RUNNING=false
    fi

    echo ""
    echo "üß™ Probando conectividad actual..."

    # Test local
    echo -n "   Local (localhost:8000): "
    if curl -s --connect-timeout 3 "http://localhost:8000/msn-ai.html" >/dev/null 2>&1; then
        echo "‚úÖ Accesible"
        LOCAL_ACCESS=true
    else
        echo "‚ùå No accesible"
        LOCAL_ACCESS=false
    fi

    echo -n "   Local Ollama (localhost:11434): "
    if curl -s --connect-timeout 3 "http://localhost:11434/api/tags" >/dev/null 2>&1; then
        echo "‚úÖ Accesible"
        LOCAL_OLLAMA=true
    else
        echo "‚ùå No accesible"
        LOCAL_OLLAMA=false
    fi

    # Test remoto
    if [ "$SERVER_IP" != "localhost" ] && [ "$SERVER_IP" != "127.0.0.1" ]; then
        echo -n "   Remoto (${SERVER_IP}:8000): "
        if curl -s --connect-timeout 3 "http://${SERVER_IP}:8000/msn-ai.html" >/dev/null 2>&1; then
            echo "‚úÖ Accesible"
            REMOTE_ACCESS=true
        else
            echo "‚ùå No accesible"
            REMOTE_ACCESS=false
        fi

        echo -n "   Remoto Ollama (${SERVER_IP}:11434): "
        if curl -s --connect-timeout 3 "http://${SERVER_IP}:11434/api/tags" >/dev/null 2>&1; then
            echo "‚úÖ Accesible"
            REMOTE_OLLAMA=true
        else
            echo "‚ùå No accesible"
            REMOTE_OLLAMA=false
        fi
    else
        REMOTE_ACCESS=false
        REMOTE_OLLAMA=false
    fi
}

# Funci√≥n para configurar firewall
configure_firewall() {
    echo ""
    echo "üî• Configurando firewall para acceso remoto..."
    echo "============================================="

    if ! command -v ufw >/dev/null 2>&1; then
        echo "‚ö†Ô∏è UFW no est√° disponible"
        echo "üí° Verificar manualmente que los puertos 8000 y 11434 est√©n abiertos"
        return 1
    fi

    echo "üîç Estado actual del firewall:"
    ufw status

    echo ""
    echo "üöÄ Configurando reglas..."

    if [ "$EUID" -eq 0 ]; then
        # Ejecut√°ndose como root
        echo "   Abriendo puerto 8000 (MSN-AI Web)..."
        ufw allow 8000 comment "MSN-AI Web Interface"
        echo "   Abriendo puerto 11434 (Ollama API)..."
        ufw allow 11434 comment "MSN-AI Ollama API"

        if ufw status | grep -q "inactive"; then
            echo "   Activando UFW..."
            ufw --force enable
        fi
        echo "‚úÖ Firewall configurado como administrador"

    elif sudo -n true 2>/dev/null; then
        # Sudo sin contrase√±a
        echo "   Abriendo puerto 8000 (MSN-AI Web)..."
        sudo ufw allow 8000 comment "MSN-AI Web Interface"
        echo "   Abriendo puerto 11434 (Ollama API)..."
        sudo ufw allow 11434 comment "MSN-AI Ollama API"

        if sudo ufw status | grep -q "inactive"; then
            echo "   Activando UFW..."
            sudo ufw --force enable
        fi
        echo "‚úÖ Firewall configurado con sudo"

    else
        # Requiere contrase√±a
        echo "üîê Se requieren permisos de administrador"
        echo "üí° Ejecutando configuraci√≥n interactiva..."

        echo "   Configurando puerto 8000..."
        if sudo ufw allow 8000 comment "MSN-AI Web Interface"; then
            echo "   ‚úÖ Puerto 8000 configurado"
        else
            echo "   ‚ùå Error configurando puerto 8000"
            return 1
        fi

        echo "   Configurando puerto 11434..."
        if sudo ufw allow 11434 comment "MSN-AI Ollama API"; then
            echo "   ‚úÖ Puerto 11434 configurado"
        else
            echo "   ‚ùå Error configurando puerto 11434"
            return 1
        fi

        if sudo ufw status | grep -q "inactive"; then
            echo "   ¬øActivar UFW? (y/N): "
            read -r ACTIVATE_UFW
            if [ "$ACTIVATE_UFW" = "y" ] || [ "$ACTIVATE_UFW" = "Y" ]; then
                sudo ufw --force enable
                echo "   ‚úÖ UFW activado"
            else
                echo "   ‚ö†Ô∏è UFW permanece inactivo"
            fi
        fi

        echo "‚úÖ Firewall configurado interactivamente"
    fi

    echo ""
    echo "üìä Estado final del firewall:"
    if command -v ufw >/dev/null 2>&1; then
        ufw status | grep -E "(8000|11434|Status)" || true
    fi

    return 0
}

# Funci√≥n para verificar y actualizar configuraci√≥n de contenedores
update_container_config() {
    echo ""
    echo "üê≥ Verificando configuraci√≥n de contenedores..."
    echo "==============================================="

    # Verificar docker-compose.yml
    if [ -f "docker/docker-compose.yml" ]; then
        echo "‚úÖ docker-compose.yml encontrado"

        # Verificar configuraci√≥n de Ollama
        if grep -q "OLLAMA_HOST=0.0.0.0:11434" docker/docker-compose.yml; then
            echo "‚úÖ Ollama configurado para acceso externo"
        else
            echo "‚ö†Ô∏è Puede ser necesario actualizar configuraci√≥n de Ollama"
        fi

        # Verificar mapeo de puertos
        if grep -q "8000:8000" docker/docker-compose.yml && grep -q "11434:11434" docker/docker-compose.yml; then
            echo "‚úÖ Puertos mapeados correctamente"
        else
            echo "‚ö†Ô∏è Verificar mapeo de puertos en docker-compose.yml"
        fi
    else
        echo "‚ùå docker-compose.yml no encontrado"
        return 1
    fi

    return 0
}

# Funci√≥n para reiniciar contenedores si es necesario
restart_containers() {
    echo ""
    echo "üîÑ Gestionando contenedores..."
    echo "============================="

    if [ "$CONTAINERS_RUNNING" = true ]; then
        echo "‚ö†Ô∏è Los contenedores est√°n ejecut√°ndose"
        echo "üí° Para aplicar cambios de configuraci√≥n, es recomendable reiniciarlos"
        echo ""
        echo "¬øReiniciar contenedores ahora? (Y/n): "
        read -r RESTART_CONTAINERS

        if [ "$RESTART_CONTAINERS" != "n" ] && [ "$RESTART_CONTAINERS" != "N" ]; then
            echo "üîÑ Reiniciando contenedores..."

            if $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml restart; then
                echo "‚úÖ Contenedores reiniciados"

                echo "‚è≥ Esperando que los servicios est√©n listos..."
                sleep 10
            else
                echo "‚ùå Error reiniciando contenedores"
                return 1
            fi
        else
            echo "‚è≠Ô∏è Manteniendo contenedores en ejecuci√≥n"
        fi
    elif [ "$CONTAINERS_EXIST" = true ]; then
        echo "üöÄ Iniciando contenedores..."
        if $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml up -d; then
            echo "‚úÖ Contenedores iniciados"
            echo "‚è≥ Esperando que los servicios est√©n listos..."
            sleep 10
        else
            echo "‚ùå Error iniciando contenedores"
            return 1
        fi
    else
        echo "‚ö†Ô∏è No hay contenedores MSN-AI"
        echo "üí° Ejecutar primero: ./start-msnai-docker.sh --auto"
        return 1
    fi

    return 0
}

# Funci√≥n para verificar acceso remoto final
verify_remote_access() {
    echo ""
    echo "üß™ Verificaci√≥n final de acceso remoto..."
    echo "========================================"

    local success=true

    echo "‚è≥ Esperando que los servicios est√©n completamente listos..."
    sleep 5

    # Test web remoto
    echo -n "üåê MSN-AI Web (${SERVER_IP}:8000): "
    if curl -s --connect-timeout 5 "http://${SERVER_IP}:8000/msn-ai.html" >/dev/null 2>&1; then
        echo "‚úÖ ACCESIBLE"
        FINAL_WEB=true
    else
        echo "‚ùå NO ACCESIBLE"
        FINAL_WEB=false
        success=false
    fi

    # Test API remoto
    echo -n "ü§ñ Ollama API (${SERVER_IP}:11434): "
    if curl -s --connect-timeout 5 "http://${SERVER_IP}:11434/api/tags" >/dev/null 2>&1; then
        OLLAMA_RESPONSE=$(curl -s "http://${SERVER_IP}:11434/api/tags" 2>/dev/null)
        MODEL_COUNT=$(echo "$OLLAMA_RESPONSE" | grep -o '"name"' | wc -l 2>/dev/null || echo "0")
        echo "‚úÖ ACCESIBLE ($MODEL_COUNT modelos)"
        FINAL_API=true
    else
        echo "‚ùå NO ACCESIBLE"
        FINAL_API=false
        success=false
    fi

    # Test local como referencia
    echo -n "üè† Acceso local (localhost:8000): "
    if curl -s --connect-timeout 3 "http://localhost:8000/msn-ai.html" >/dev/null 2>&1; then
        echo "‚úÖ OK"
    else
        echo "‚ùå PROBLEMA"
        success=false
    fi

    return $([ "$success" = true ] && echo 0 || echo 1)
}

# Funci√≥n para mostrar resultado final
show_final_result() {
    echo ""
    echo "üéâ RESULTADO DE LA CONFIGURACI√ìN"
    echo "==============================="
    echo ""

    if [ "$FINAL_WEB" = true ] && [ "$FINAL_API" = true ]; then
        echo "‚úÖ ACCESO REMOTO HABILITADO EXITOSAMENTE"
        echo ""
        echo "üîó URLs DE ACCESO:"
        echo "   üè† Local:  http://localhost:8000/msn-ai.html"
        echo "   üåê Remoto: http://$SERVER_IP:8000/msn-ai.html"
        echo ""
        echo "üåü CARACTER√çSTICAS ACTIVAS:"
        echo "   ‚úÖ Acceso desde cualquier dispositivo en la red"
        echo "   ‚úÖ Auto-detecci√≥n de configuraci√≥n en la interfaz"
        echo "   ‚úÖ Modelos de IA accesibles remotamente"
        echo "   ‚úÖ Firewall configurado correctamente"
        echo ""
        echo "üí° INSTRUCCIONES PARA USUARIOS:"
        echo "   1. Desde la red local, acceder a: http://$SERVER_IP:8000/msn-ai.html"
        echo "   2. La interfaz detectar√° autom√°ticamente la configuraci√≥n remota"
        echo "   3. Los modelos se cargar√°n autom√°ticamente"
        echo "   4. ¬°Listo para usar!"

    elif [ "$LOCAL_ACCESS" = true ]; then
        echo "‚ö†Ô∏è ACCESO REMOTO PARCIAL"
        echo ""
        echo "‚úÖ Funcionando localmente: http://localhost:8000/msn-ai.html"
        echo "‚ùå Problemas de acceso remoto detectados"
        echo ""
        echo "üõ†Ô∏è POSIBLES CAUSAS:"

        if [ "$FINAL_WEB" = false ]; then
            echo "   ‚Ä¢ Puerto 8000 puede estar bloqueado"
        fi

        if [ "$FINAL_API" = false ]; then
            echo "   ‚Ä¢ Puerto 11434 puede estar bloqueado"
        fi

        echo ""
        echo "üí° SOLUCIONES:"
        echo "   1. Verificar firewall del router/gateway"
        echo "   2. Verificar otros firewalls (iptables, firewalld)"
        echo "   3. Probar desde otro dispositivo en la misma red"
        echo "   4. Verificar logs: docker logs msn-ai-app"

    else
        echo "‚ùå PROBLEMAS DETECTADOS"
        echo ""
        echo "üõ†Ô∏è DIAGN√ìSTICO:"
        echo "   ‚Ä¢ Verificar que los contenedores est√©n ejecut√°ndose"
        echo "   ‚Ä¢ Revisar logs: docker logs msn-ai-app"
        echo "   ‚Ä¢ Verificar configuraci√≥n de red"
        echo ""
        echo "üí° INTENTAR:"
        echo "   ./docker-start.sh    # Reiniciar servicios"
        echo "   ./docker-status.sh   # Verificar estado"
    fi

    echo ""
    echo "üìã COMANDOS √öTILES:"
    echo "   üîç Estado:     $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml ps"
    echo "   üìã Logs:       $DOCKER_COMPOSE_CMD -f docker/docker-compose.yml logs -f"
    echo "   üß™ Test:       ./test-remote-connection.sh"
    echo "   üîß Diagn√≥s.:   ./docker-test-ai.sh"

    echo ""
    echo "üìû Soporte: alan.mac.arthur.garcia.diaz@gmail.com"
    echo "üîß Enable Remote Access v1.0.0"
}

# Funci√≥n principal
main() {
    # Paso 1: Verificar estado actual
    check_current_status

    echo ""
    if [ "$REMOTE_ACCESS" = true ] && [ "$REMOTE_OLLAMA" = true ]; then
        echo "‚úÖ EL ACCESO REMOTO YA EST√Å FUNCIONANDO"
        echo ""
        echo "üîó URLs disponibles:"
        echo "   üè† Local:  http://localhost:8000/msn-ai.html"
        echo "   üåê Remoto: http://$SERVER_IP:8000/msn-ai.html"
        echo ""
        echo "üí° No se requiere configuraci√≥n adicional"
        exit 0
    fi

    echo "üéØ HABILITANDO ACCESO REMOTO..."
    echo "=============================="

    if [ "$LOCAL_ACCESS" = false ]; then
        echo "‚ùå MSN-AI no est√° funcionando localmente"
        echo "üí° Primero ejecuta: ./start-msnai-docker.sh --auto"
        exit 1
    fi

    # Paso 2: Configurar firewall
    if ! configure_firewall; then
        echo "‚ö†Ô∏è Problemas configurando firewall"
        echo "üí° Contin√∫a, pero el acceso remoto puede no funcionar"
    fi

    # Paso 3: Verificar configuraci√≥n de contenedores
    update_container_config

    # Paso 4: Reiniciar contenedores si es necesario
    if ! restart_containers; then
        echo "‚ùå Problemas con los contenedores"
        exit 1
    fi

    # Paso 5: Verificaci√≥n final
    if verify_remote_access; then
        echo "üéâ ¬°Acceso remoto configurado exitosamente!"
    else
        echo "‚ö†Ô∏è Configuraci√≥n completada con advertencias"
    fi

    # Paso 6: Mostrar resultado
    show_final_result
}

# Manejo de argumentos
case "${1:-}" in
    --help|-h)
        echo "üìã USO: $0 [opciones]"
        echo ""
        echo "Este script habilita el acceso remoto en una instalaci√≥n"
        echo "existente de MSN-AI con Docker."
        echo ""
        echo "Opciones:"
        echo "  --help, -h    Mostrar esta ayuda"
        echo ""
        echo "¬øQu√© hace este script?"
        echo "  üî• Configura autom√°ticamente el firewall"
        echo "  üê≥ Verifica la configuraci√≥n de contenedores"
        echo "  üîÑ Reinicia servicios si es necesario"
        echo "  üß™ Verifica que el acceso remoto funcione"
        echo ""
        echo "Requisitos:"
        echo "  ‚Ä¢ MSN-AI ya instalado con Docker"
        echo "  ‚Ä¢ Permisos sudo (para configurar firewall)"
        echo "  ‚Ä¢ Contenedores funcionando localmente"
        echo ""
        echo "Resultado:"
        echo "  Local:  http://localhost:8000/msn-ai.html"
        echo "  Remoto: http://[IP-SERVIDOR]:8000/msn-ai.html"
        exit 0
        ;;
    --version|-v)
        echo "MSN-AI Enable Remote Access v1.0.0"
        echo "Por: Alan Mac-Arthur Garc√≠a D√≠az"
        echo "Licencia: GPL-3.0"
        exit 0
        ;;
esac

# Ejecutar funci√≥n principal
echo "üöÄ Iniciando configuraci√≥n de acceso remoto..."
echo "üåê Servidor objetivo: $SERVER_IP"
echo ""

main

echo ""
echo "üéâ ¬°Configuraci√≥n de acceso remoto completada!"
